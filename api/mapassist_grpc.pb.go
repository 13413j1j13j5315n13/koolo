// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MapAssistApiClient is the client API for MapAssistApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapAssistApiClient interface {
	GetData(ctx context.Context, in *R, opts ...grpc.CallOption) (*Data, error)
}

type mapAssistApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMapAssistApiClient(cc grpc.ClientConnInterface) MapAssistApiClient {
	return &mapAssistApiClient{cc}
}

func (c *mapAssistApiClient) GetData(ctx context.Context, in *R, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/api.MapAssistApi/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapAssistApiServer is the server API for MapAssistApi service.
// All implementations must embed UnimplementedMapAssistApiServer
// for forward compatibility
type MapAssistApiServer interface {
	GetData(context.Context, *R) (*Data, error)
	mustEmbedUnimplementedMapAssistApiServer()
}

// UnimplementedMapAssistApiServer must be embedded to have forward compatible implementations.
type UnimplementedMapAssistApiServer struct {
}

func (UnimplementedMapAssistApiServer) GetData(context.Context, *R) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedMapAssistApiServer) mustEmbedUnimplementedMapAssistApiServer() {}

// UnsafeMapAssistApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapAssistApiServer will
// result in compilation errors.
type UnsafeMapAssistApiServer interface {
	mustEmbedUnimplementedMapAssistApiServer()
}

func RegisterMapAssistApiServer(s grpc.ServiceRegistrar, srv MapAssistApiServer) {
	s.RegisterService(&MapAssistApi_ServiceDesc, srv)
}

func _MapAssistApi_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(R)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapAssistApiServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MapAssistApi/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapAssistApiServer).GetData(ctx, req.(*R))
	}
	return interceptor(ctx, in, info, handler)
}

// MapAssistApi_ServiceDesc is the grpc.ServiceDesc for MapAssistApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapAssistApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MapAssistApi",
	HandlerType: (*MapAssistApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _MapAssistApi_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapassist.proto",
}
